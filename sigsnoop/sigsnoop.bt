#!/bin/env bpftrace
// SPDX-License-Identifier: GPL-2.0-or-later
/**
 * sigsnoop.bt - Trace standard and real-time signals.
 *               For Linux, uses bpftrace and eBPF.
 *
 * This is a bpftrace version of the bcc libbpf-tools/sigsnoop of the same name.
 *
 * USAGE: sigsnoop.bt
 *
 * Copyright (C) 2024 CESTC, Co.
 */
#ifndef BPFTRACE_HAVE_BTF
#include <linux/sched.h>
#endif

BEGIN
{
	@SIG_STR[1] = "SIGHUP";
	@SIG_STR[2] = "SIGINT";
	@SIG_STR[3] = "SIGQUIT";
	@SIG_STR[4] = "SIGILL";
	@SIG_STR[5] = "SIGTRAP";
	@SIG_STR[6] = "SIGABRT";
	@SIG_STR[7] = "SIGBUS";
	@SIG_STR[8] = "SIGFPE";
	@SIG_STR[9] = "SIGKILL";
	@SIG_STR[10] = "SIGUSR1";
	@SIG_STR[11] = "SIGSEGV";
	@SIG_STR[12] = "SIGUSR2";
	@SIG_STR[13] = "SIGPIPE";
	@SIG_STR[14] = "SIGALRM";
	@SIG_STR[15] = "SIGTERM";
	@SIG_STR[16] = "SIGSTKFLT";
	@SIG_STR[17] = "SIGCHLD";
	@SIG_STR[18] = "SIGCONT";
	@SIG_STR[19] = "SIGSTOP";
	@SIG_STR[20] = "SIGTSTP";
	@SIG_STR[21] = "SIGTTIN";
	@SIG_STR[22] = "SIGTTOU";
	@SIG_STR[23] = "SIGURG";
	@SIG_STR[24] = "SIGXCPU";
	@SIG_STR[25] = "SIGXFSZ";
	@SIG_STR[26] = "SIGVTALRM";
	@SIG_STR[27] = "SIGPROF";
	@SIG_STR[28] = "SIGWINCH";
	@SIG_STR[29] = "SIGIO";
	@SIG_STR[30] = "SIGPWR";
	@SIG_STR[31] = "SIGSYS";
	@SIG_STR[32] = "SIGNAL-32"; /* SIGRTMIN in kernel */
	@SIG_STR[33] = "SIGNAL-33";
	@SIG_STR[34] = "SIGNAL-34";
	@SIG_STR[35] = "SIGNAL-35";
	@SIG_STR[36] = "SIGNAL-36";
	@SIG_STR[37] = "SIGNAL-37";
	@SIG_STR[38] = "SIGNAL-38";
	@SIG_STR[39] = "SIGNAL-39";
	@SIG_STR[40] = "SIGNAL-40";
	@SIG_STR[41] = "SIGNAL-41";
	@SIG_STR[42] = "SIGNAL-42";
	@SIG_STR[43] = "SIGNAL-43";
	@SIG_STR[44] = "SIGNAL-44";
	@SIG_STR[45] = "SIGNAL-45";
	@SIG_STR[46] = "SIGNAL-46";
	@SIG_STR[47] = "SIGNAL-47";
	@SIG_STR[48] = "SIGNAL-48";
	@SIG_STR[49] = "SIGNAL-49";
	@SIG_STR[50] = "SIGNAL-50";
	@SIG_STR[51] = "SIGNAL-51";
	@SIG_STR[52] = "SIGNAL-52";
	@SIG_STR[53] = "SIGNAL-53";
	@SIG_STR[54] = "SIGNAL-54";
	@SIG_STR[55] = "SIGNAL-55";
	@SIG_STR[56] = "SIGNAL-56";
	@SIG_STR[57] = "SIGNAL-57";
	@SIG_STR[58] = "SIGNAL-58";
	@SIG_STR[59] = "SIGNAL-59";
	@SIG_STR[60] = "SIGNAL-60";
	@SIG_STR[61] = "SIGNAL-61";
	@SIG_STR[62] = "SIGNAL-62";
	@SIG_STR[63] = "SIGNAL-63";
	@SIG_STR[64] = "SIGNAL-64"; /* SIGRTMAX */

	printf("Tracing signals, hit ctrl-c to end.\n");
	printf("%-8s %-8s %-16s %-8s %-8s\n",
		"TIME", "PID", "COMM", "TPID", "SIG");
}

tracepoint:syscalls:sys_enter_kill,
tracepoint:syscalls:sys_enter_tkill,
tracepoint:syscalls:sys_enter_tgkill
{
	@pids[tid] = args->pid;
	@sigs[tid] = args->sig;
}

tracepoint:syscalls:sys_exit_kill,
tracepoint:syscalls:sys_exit_tkill,
tracepoint:syscalls:sys_exit_tgkill
/ @pids[tid] && @sigs[tid] /
{
	$pid = @pids[tid];
	$sig = @sigs[tid];

	time("%H:%M:%S ");
	if (@SIG_STR[$sig] == "") {
		printf("%-8d %-16s %-8d %-8d\n", pid, comm, $pid, $sig);
	} else {
		printf("%-8d %-16s %-8d %-8s\n", pid, comm, $pid, @SIG_STR[$sig]);
	}

	delete(@pids[tid]);
	delete(@sigs[tid]);
}

tracepoint:signal:signal_generate
{
	$pid = args->pid;
	$sig = args->sig;

	time("%H:%M:%S ");
	if (@SIG_STR[$sig] == "") {
		printf("%-8d %-16s %-8d %-8d\n", pid, comm, $pid, $sig);
	} else {
		printf("%-8d %-16s %-8d %-8s\n", pid, comm, $pid, @SIG_STR[$sig]);
	}
}

END
{
	clear(@pids);
	clear(@sigs);
	clear(@SIG_STR);
	printf("Bye.\n");
}
